#!/usr/bin/env ruby

# An RSpec wrapper that cuts down on the clutter
# and makes it easier to re-run failing tests.
#
# run:
#   rtest --help
# to see full usage options.
#
#
require 'json'
require 'open3'
require 'optparse'
require 'tempfile'

# in case you use byebug or binding.pry
require 'expect'
require 'io/wait'
require 'pty'
require 'stringio'


USAGE=<<~EOL
rtest is a convenience tool to make life easier when dealing with RSpec.

Output is limited to actionable details about failing tests and
just enough to get you to the right place to fix them.

rtest also has a number of options for making it trivial to rerun
failing tests without needing to specify paths and line numbers.

Version: VERSION_NUMBER_HERE

USAGE:

rtest [-h | --help]
  display these usage instructions

rtest
  shows you numbered list of last test failures (if any)

rtest all
  run _all_ rspect tests

rtest last_file
  finds the last file that had a problem
  and runs all the tests in it.

rtest <n>
  re-run a specific failure from the last test
  as identified by its number

rtest <n> +/-<x>
  re-run a specific failure from the last test
  as identified by its number
  BUT offset the line number of the test +/- x
  (useful if you've added or removed lines above it)

  Ex. rtest 5 +2
  runs example number 5 but specifes a line number 2 greater
  than the initial failure reported.

rtest <path_to/file_spec.rb>
  run a specific spec and captures failures (if any)
  you can run it with the optional line number syntax too
  E.g. rtest path_to/file_spec.rb
    or rtest path_to/file_spec.rb:32

rtest kill <number>
  removes the test with the specified number from the
  list of past failures

rtest kill <number>-<number>
  removes the tests with numbers within the specified
  range of past failure numbers (inclusive).

rtest rerun
  runs all the past failures
  functionally identical to calling with just the
  number for each of the known failures.

rtest file <number>
  outputs the file path from the test with that number
  Ex.
  path/to/failing_spec

rtest files
  outputs a list of all the files+line numbers of failing tests
  Ex:
  path/to/failing_spec:43
  path/to/failing_spec:68
  path/to/other_spec:44

rtest [-s | --shortened]
  Truncates file paths to fit the screen width if possible.
  Guaranteed to always leave the basename intact.

VERBOSE MODE

rtest [-v|--verbose] <any prior command>
  instead of "marching ants" verbose mode will print out the names
  of classes under test as their respective tests are being run.

AUTOMATIC VERBOSE MODE

rtest [-a<seconds> | --auto-verbose=<seconds>]
  This option specifies the number of seconds after which rtest
  will automatically switch into verbose mode. Alternately, rtest
  will watch for an RTEST_AUTO_VERBOSE environment varible.

  Must be an integer greater than 0. The command line option will
  trump the environment variable. So if you like running in
  verbose mode by default you can temporarily turn it off by
  passing in --auto-verbose=0


RTEST DEVELOPERS

rtest [-t<TEST_FILE_PATH>|--test=<TEST_FILE_PATH>]
  this will specify a test file that will be used for input
  instead of running rspec.

  It is expected that it will be paired with a file of the same
  name but with the _expected_output suffix. For example:

  test_0.txt should have a corresponding test_0_expected_output.txt

  Note that *_expected_output.txt files _should not_ contain the
  "Running message|path/to/spec" line
  or the "...." line.

rtest [-d|--debug]
  outputs information about processed data

EOL
USAGE.freeze

# NOTE: How to Capture Test Output
# bundle exec rspec foo_spec.rb | sd "\r\n" "\n" > path/to/test_data/test_N.txt
# rtest foo_spec.rb | ansifilter | sed -e "s/^Running .*//" | sd "^\.+\n" "" > path/to/test_data/test_N_expected_output.txt


# SET UP THE COLORS
ERROR_LINE_COLOR="\e[38;5;196m"
FILE_HIGHLIGHT_COLOR="\e[38;5;7m"
EXPECTED_LINE_COLOR="\e[32m"
GOT_LINE_COLOR="\e[38;5;7m" #"\e[91m"
LINE_NUMBER_COLOR="\e[38;5;214m" # was 100;33
ERROR_HERE_LINE_COLOR="\e[1;38;5;7m" # "\e[100,37m"
COLOR_RESET="\e[0m"
DETAIL_LINE_COLOR="\e[38;2;255;140;0m"
SUCCESS_COLOR="\e[38;2;7;198;25m"


# The regex to match ANSI codes
# from https://github.com/piotrmurach/strings-ansi
ANSI_MATCHER = %r{
  (?>\033(
    \[[\[?>!]?\d*(;\d+)*[ ]?[a-zA-Z~@$^\]_\{\\] # graphics
    |
    \#?\d # cursor modes
    |
    [)(%+\-*/. ](\d|[a-zA-Z@=%]|) # character sets
    |
    O[p-xA-Z] # special keys
    |
    [a-zA-Z=><~\}|] # cursor movement
    |
    \]8;[^;]*;.*?(\033\\|\07) # hyperlink
  ))
}x.freeze


NO_FAILURES_TEXT="\n✅ No failures."
NO_TESTS_RUN_TEXT="\n -----------------------------------------------\n⚠️   NOTE: This is only a replay of past output."

PAST_RUN_FILENAME=".rtest.json"

@options = {
  :shortened_paths => false,
  :verbose => false,
  :debug => false,
  :auto_verbose_seconds => 0,
  :rspec => false
}


options_parser = OptionParser.new do |parser|
  parser.banner = "Usage: example.rb [options]"

  parser.on("-v", "--verbose", "Run verbosely") do |v|
    @options[:verbose] = v
  end

  parser.on("-s", "--shortened", "Truncate paths to fit screen width") do
    @options[:shortened_paths] = true
  end

  parser.on("-tTEST_FILE", "--test=TEST_FILE", "path to test file") do |tf|
    @options[:test_file] = tf
    @options[:expected_output_file] = tf.sub(/\.txt$/, "_expected_output.txt")
  end

  parser.on("-aSECONDS", "--auto-verbose=SECONDS", "Switch to verbose mode if run takes more than SECONDS") do | s |
    @options[:auto_verbose_seconds] = s.to_i
  end

  parser.on("--rspec=NUMBER", "Run the specified test in rspec") do |number|
    @options[:rspec] = number.to_i
  end

  parser.on("-d", "--debug", "Debug mode") do
    @options[:debug] = true
  end

  parser.on("-h", "--help") do
    puts USAGE
    exit 0
  end

end

numeric_options = ARGV.select{|o| /^-?\d+$/.match(o)}
foo = options_parser.parse(ARGV.reject{|o| /^-?\d+$/.match(o)})
REMAINING_ARGS = ARGV.reject{|o| /^-\w+\S*|^--[-\w]+(?:=\S+)$/.match(o)} + numeric_options
OPTIONS=@options



VERBOSE = OPTIONS[:verbose]
if OPTIONS[:auto_verbose_seconds] > 0
  AUTO_VERBOSE = OPTIONS[:auto_verbose_seconds]
else
  # "".to_i == 0
  AUTO_VERBOSE = ENV['RTEST_AUTO_VERBOSE'].to_i
end
TEST_MODE = OPTIONS.has_key? :test_file
VERBOSE_TEST = TEST_MODE && VERBOSE
if VERBOSE_TEST
  puts "Running in Verbose Test mode."
end
DEBUG = OPTIONS[:debug]

SCREEN_WIDTH= (ENV['COLUMNS'] || `tput cols`.chomp || 80).to_i

INPUT = REMAINING_ARGS.size > 0 ? REMAINING_ARGS.shift : nil

START=Time.now.to_i

#-----------------------
class Failure
  attr_accessor :details,
                :diff,
                :display_number,
                :expected,
                :file,
                :file_full_path,
                :got,
                :killable,
                :line_number,
                :offset,
                :message,
                :persisted,
                :spec_file,
                :spec_file_full_path,
                :spec_file_line_number

  def initialize()
    self.killable = false
    self.offset = 0
  end

  def empty?
    ! (details || diff || expected || file || file_full_path || got || line_number || message || spec_file || spec_file_full_path || spec_file_line_number)
  end

  def killable?
    self.killable
  end
  def persisted?
    self.persisted
  end

  def rerunable?
    self.spec_file_full_path || self.spec_file
  end

  def as_rspec_arg
    (self.spec_file_full_path || self.spec_file) +
      self.spec_arg_line_number
  end

  def spec_arg_line_number
    self.spec_file_line_number.nil? ? "" : ":" + (self.spec_file_line_number + self.offset).to_s
  end

  def to_json
    {
      "details"               => self.details,
      "diff"                  => self.diff,
      # display number is recalculated when read from file
      # "display_number"        => self.display_number,
      "expected"              => self.expected,
      "file"                  => self.file,
      "file_full_path"        => self.file_full_path,
      "got"                   => self.got,
      # "killable"              => self.killable, # never persisted
      "line_number"           => self.line_number,
      "message"               => self.message,
      # "offset"                => self.offset, # never persisted
      # "persisted"             => self.persisted, # duh
      "spec_file"             => self.spec_file,
      "spec_file_full_path"   => self.spec_file_full_path,
      "spec_file_line_number" => self.spec_file_line_number
    }
  end

  def self.from_json(json, display_number = nil)
    new_failure = Failure.new()
    json.keys.each do | key |
      new_failure.send("#{key}=".to_sym, json[key])
    end
    new_failure.display_number = display_number if display_number
    new_failure.persisted = true
    new_failure
  end
end

class Killer

  # returns a new array of failures
  # without the killable ones.
  def self.cull_failures(failures)
    failures.reject{ |f| f.killable }
  end

  def self.clean_run_data(run_data)
    run_data.failures.reject!{ |failure| failure.killable }
    run_data
  end

  # the numbers passed in are the user-facing numbers
  def self.mark_for_death(run_log, numbers)
    # any_bad_numbers = false
    Array(numbers).each do |n|
      failure = run_log.get_failure_by_number(n)
      if failure
        failure.killable = true
      else
        STDERR.puts("#{ERROR_LINE_COLOR}Can't find #{n} for killing.#{COLOR_RESET}")
        # any_bad_numbers = true
      end
    end
    # if any_bad_numbers
    #   run_log.failures.each do | f |
    #     # next if f.killable?
    #     STDERR.puts "#{f.display_number}) #{f.message}"
    #   end
    # end
  end
end

class RunLog
  attr_accessor :failures

  def self.from_json(json)
    rl = RunLog.new()
    failure_objects = []

    json["failures"].each_with_index do |json_f, index|
      failure_objects << Failure.from_json(json_f, (index + 1))
    end
    rl.failures = failure_objects

    rl
  end

  # It is expected that the file won't exist
  # In that scenario we just create a new RunLog
  # File looks like this:
  # {
  #   failures: [
  #     {
  #       message: "",
  #       details: "",
  #       file: "",
  #       line_number: 123
  #       expected: ""
  #       got: "",
  #       diff: ""
  #     }
  #   ]
  # }
  def self.from_file(file_path)
    begin
      self.from_json(JSON.parse(File.read(file_path)))
    rescue StandardError => e
      STDERR.puts("problem parsing #{filename}: #{e.message}")
      #something usable for new run at least...
      RunLog.new()
    end
  end

  def initialize()
    self.failures = []
  end

  def has_failures?
    self.failure_count > 0
  end

  def failure_count
    self.failures.size
  end

  def failure_numbers
    failures.map{ |f| f.display_number }
  end

  def get_failure_by_number(number)
    failures.each do | f |
      return f if f.display_number == number
    end
    nil
  end

  # at the moment "failures" are the only thing
  # stored about a run.
  # Over time I expect more metadata will be added
  def to_json()
    {"failures" => failures.map{ |f| f.killable? ? nil : f.to_json }.flatten }.to_json
  end

  def rerun_all
    Rerunner.new(self).rerun_all
  end

  def rerun_numbers(numbers)
    Rerunner.new(self).rerun(numbers)
  end

  def last_file
    self.failures
      .map{|f| f.spec_file_full_path || f.file }
      .select{|f| f.end_with?("_spec.rb")}
      .last
  end

  def failures_in_file(spec_file)
    self.failures.select{ |f| f.spec_file_full_path == spec_file }
  end

  def new_failures
    self.failures.select{ |f| ! f.persisted? }
  end

end

# Rerunner manages reruns of past failures
# because individual failures are rerun
# indpependently there are problems that
# need to be addressed
#
# 1. rspec is always going to start the numbering at 1
#    (for every run) so we end up with 1, 1, 1, 1...
# 2. a failure might become fixed and need to be
#    removed from the list
# 3. a single failure might become multiple failures
#    which then need to be recorded.
#
# In order to accomplish 2 we need to create
# a new "past run"  object that we can populate with
class Rerunner
  attr_accessor :run_log

  def initialize(run_log)
    self.run_log = run_log
  end
  # rerun all past failures
  def rerun_all
    rerun(run_log.failure_numbers)
  end


  # rerun one past failure
  def rerun(numbers)
    numbers = Array(numbers)
    # iterate over each failure,
    # pass it to be rerun
    # collect the resulting failure(s)
    # and replace the existing one with them
    # or kill it if there were none.
    new_run_log = RunLog.new()

    # display counter is -1 because
    # i still haven't refactored
    # away from old 0 based index iteration yet
    # TODO: redo how non-rerun iteration & display to be 1 based
    display_counter = 0
    run_log.failures.each_with_index do | failure, index |
      display_counter += 1
      if numbers.include? (index + 1)

        rerun_log = rerun_failure(failure)
        if rerun_log.has_failures?
          display_counter -= 1 # because we're about to increment it n times
          rerun_log.failures.each do | new_failure |
            display_counter += 1

            new_failure.display_number  = display_counter
            new_run_log.failures << new_failure
            display_failure(new_failure)
          end
        else
          puts fixed_failure_message(failure)
        end
      else
        new_run_log.failures << failure
      end
    end

    new_run_log
  end

  def rerun_last_file
    last_file = self.run_log.last_file
    failure_numbers = self.run_log.failures_in_file(last_file).map{ |f| f.display_number }
    rerun(failure_numbers)
  end

  private

  def fixed_failure_message(failure)
    "\n✅ #{SUCCESS_COLOR}FIXED: #{failure.message}#{COLOR_RESET}"
  end


end



#------------------------


################
# terminal interactivity stuff
# in case you use binding.pry or byebug
# type things
def currently_verbose?
  @current_verboseness_state ||= VERBOSE
  return true if @current_verboseness_state
  if AUTO_VERBOSE > 0 && (Time.now.to_i - START) >= AUTO_VERBOSE
    if @current_verboseness_state == false
      puts "\nℹ️  Auto-enabling \"Verbose mode\" after #{AUTO_VERBOSE} seconds.\n"
      @current_verboseness_state = true
    end
    return true
  end
  false
end

def process_running?(pid)
  Process.getpgid(pid)
  true # or boom
rescue
  false
end

def unescape(text)
  text.gsub(ANSI_MATCHER, '')
end
def buffer_last_line(buffer)
  last_line = buffer.string.split("\n").last
  return nil unless last_line
  unescape(last_line)
end

def definite_debugger_line(line)
  return false unless line
  # puts "line.inspect: '#{line.inspect}'"
  !! line.match(/^\(byebug\) $|^\[\d+\] pry\(.*?\)> $/)
end
def potential_debugger_pause(line)
  !! line.match(/^\s*\d+:\s+/)
end

def wait_for_read(reader, pid, last_line, counter = 0)
  # counter is a count of times through this with
  # potential debugger pause lines
  running = process_running?(pid)
  while running && ! reader.ready?
    putc "." unless currently_verbose? #ironically
    return :debugger if definite_debugger_line(last_line)
    if last_line && potential_debugger_pause(last_line)
      counter += 1
      return :debugger if counter > 4
    end
    sleep 0.2
  end
  if running
    :running
  else
    :ready
  end
end

def read_into_buffer(reader, buffer)
  temp_buffer = StringIO.new("")
  loop do
    break unless reader.ready?
    char = reader.read(1)
    break if char.nil?
    temp_buffer.putc(char)
  end

  temp_string = unescape(temp_buffer.string)
  if temp_string.length > 0
    if currently_verbose? && temp_string.strip.length > 0
      test_names = extract_test_names(temp_string)
      if test_names.size > 0
        puts "\t⤏ #{test_names.join("\n\t⤏ ")}"
      end
    end

    buffer << temp_string
  end
end

def extract_test_names(string)
  lines = string.split("\n")
  lines.select{|l| /^[A-Z][\w\d]*(?:::[A-Z][\w\d]*)*\s*$/.match(l)}
end

################



def display_failures(failures)
  failures.each_with_index do | failure, idx |
    display_failure(failure, idx)
  end
end

def reformat_failure_details(details)
  details_lines = details.split("\n")
  if details_lines.size > 2
    # 2 because it's typically
    # [0]<error line>\n[1]<blank line>\n[2]<error message>
    (2..(details_lines.size - 1) ).each do | idx |
      details_lines[idx] = "\t►#{details_lines[idx]}"
    end
  end
  "\t" + details_lines.join("\n")
end

def display_failure(failure, index = -1)
  if failure.display_number
    puts "\n#{ERROR_LINE_COLOR}#{failure.display_number}: #{failure.message}#{COLOR_RESET}\n"
  else
    puts "\n#{ERROR_LINE_COLOR}#{index + 1}: #{failure.message}#{COLOR_RESET}\n"
  end
  puts printable_file_and_line_num(failure)

  if ! failure.details.nil?
    formatted_details = reformat_failure_details(failure.details)
    puts "#{DETAIL_LINE_COLOR}#{formatted_details}#{COLOR_RESET}"
  end

  puts "\t\t#{EXPECTED_LINE_COLOR}expected: #{failure.expected}#{COLOR_RESET}" if failure.expected
  puts "\t\t#{GOT_LINE_COLOR}got     : #{failure.got}#{COLOR_RESET}" if failure.got

  puts "\n\t\tDiff:\n#{failure.diff.join("\n\t\t")}" if failure.diff
end


# a path line is a line that ends in a file path
# it may or may not, have a preface.
def path_line_truncator(preface, path, suffix, soft_max=SCREEN_WIDTH)
  #TODO calculate how long a tab stop is
  #for now i'm assuming the default of 8 characters

  untruncated_line = preface + path + suffix
  if ! OPTIONS[:shortened_paths]
    return untruncated_line
  else
    tab_length = 8
    preface ||= ""
    unescaped_preface = unescape(preface)
    unescaped_suffix = unescape(suffix)
    non_file_length =  unescaped_preface.length + (unescaped_preface.gsub(/[^\t]/, '').length * (tab_length - 1)) + unescaped_suffix.length

    basename = File.basename(path)
    elipsis_basename = "…#{File::SEPARATOR}#{basename}"

    if basename.length >= soft_max
      return elipsis_basename
    else
      available_chars = soft_max - elipsis_basename.length - non_file_length
      path_chunks = path.split(File::SEPARATOR)
      returnable = []

      # efficient? no, not really, but easy to think about? yes
      # and yeah, there's got to be a better way to do this.
      # TODO: refactor this to be less... kludgey
      (0..path_chunks.length).each do | index |
        if index != path_chunks.length
          chunk = path_chunks[index]
          returnable << chunk
          if returnable.join(File::SEPARATOR).length > available_chars
            return preface +
                  (returnable[0..-2] + [elipsis_basename]).join(File::SEPARATOR) +
                  suffix
          end
        else
          return untruncated_line
        end
      end
    end
  end
end

def printable_file_and_line_num(failure)
  lines = []
  if failure.spec_file
	# details on fd and what it takes can be found here
	# https://github.com/sharkdp/fd#readme

    if failure.file
      # if so, we're going to display the spec error & where it blew up in the file
      lines << path_line_truncator(
        "\tFAILED SPEC: #{ERROR_HERE_LINE_COLOR}",
        failure.spec_file_full_path,
        "#{COLOR_RESET}:#{LINE_NUMBER_COLOR}#{failure.spec_file_line_number}#{COLOR_RESET}"
      )

      lines <<
        path_line_truncator("\tERROR HERE : #{ERROR_HERE_LINE_COLOR}",
                            failure.file_full_path,
                            "#{COLOR_RESET}:#{LINE_NUMBER_COLOR}#{failure.line_number}#{COLOR_RESET}"
        )
    else
      # we're _only_ going to display the spec file where the error occurred.
      lines <<  path_line_truncator("\tERROR HERE : #{ERROR_HERE_LINE_COLOR}",
                                    failure.spec_file_full_path,
                                    "#{COLOR_RESET}:#{LINE_NUMBER_COLOR}#{failure.spec_file_line_number}#{COLOR_RESET}"
                )
    end
    lines.join("\n")
  else
    # what is even happening?!
    path_line_truncator(
      "\tERROR HERE : #{ERROR_HERE_LINE_COLOR}",
      failure.file,
      "#{COLOR_RESET}:#{LINE_NUMBER_COLOR}#{failure.line_number}#{COLOR_RESET}"
    )
  end
end


# returns a RunLog
def process_rspec_output(output)
  new_run_data = RunLog.new()
  output_lines = output.split("\n")
  in_failure = false
  in_diff = false
  current_failure = Failure.new()
  top_failure=""
  in_sub_failure = false
  output_lines.each_with_index do | line, idx |
    if VERBOSE_TEST || DEBUG
      STDERR.puts("-->" + line)
      STDERR.puts("XXX in failure: #{in_failure}") if VERBOSE_TEST
    end

    if not in_failure
      match_data =  /^\s+\d+(\.\d+)*\)\s+(.*)/.match(line)
      STDERR.puts("XXX match_data: #{match_data.inspect}") if VERBOSE_TEST

      if match_data
        STDERR.puts("XXX found failure start") if VERBOSE_TEST

        # starting a new failure
        in_failure = true
        in_sub_failure = match_data[1].nil? ? false : true
        # if ! in_sub_failure
          unless current_failure.empty?
            new_run_data.failures << current_failure
            #display_failure(current_failure, new_run_data.failures.length - 1)
          end
        # end
        top_failure = match_data[2]
        current_failure = Failure.new()
        current_failure.message = match_data[2]
      # else, random crap we don't care about
      end
    else
      # in a failure, and past the initial line
      details_match = /^\s+(\d+(?:\.\d+)*\)\s+)?Failure\/Error:\s*(.*)/.match(line)

      expected_match = /^\s+expected:\s+(.*)/.match(line)

      # seriously RSpec? Why can't you be consistent?
      got_match = /^\s+(?:got|received):\s+(.*)/.match(line)

      trace_match = /^\s+#\s+(.*?\/(.*?\.rb)):(\d+):in /.match(line)
      spec_match = /^\s+#\s+((?:\.\/)?spec\/.*?\/(.*?_spec\.rb)):(\d+):in `block/.match(line)
      # ^^^ https://regexper.com/#%5E%5Cs%2B%23%5Cs%2B%28%28%3F%3A%5C.%5C%2F%29%3Fspec%5C%2F.*%3F%5C%2F%28.*%3F%5C.rb%29%29%3A%28%5Cd%2B%29%3Ain%20

      diff_match = /^\s+Diff:\s*/.match(line)

      something_match = /^\s+\w+.*/.match(line)

      finished_match = /^Finished in \d+\.\d+ seconds/.match(line)

      if VERBOSE_TEST
        STDERR.puts("XXX details_match: #{details_match.inspect}")
        STDERR.puts("XXX expected_match: #{expected_match.inspect}")
        STDERR.puts("XXX got_match: #{got_match.inspect}")
        STDERR.puts("XXX trace_match: #{trace_match.inspect}")
        STDERR.puts("XXX spec_match: #{spec_match.inspect}")
        STDERR.puts("XXX diff_match: #{diff_match.inspect}")
        STDERR.puts("XXX something_match: #{something_match.inspect}")
        STDERR.puts("XXX finished_match: #{finished_match.inspect}")
      end


      if finished_match
        in_sub_failure = false
        in_failure=false
      elsif details_match
        if ! details_match[1].nil?
          # we're in a sub-failure
          in_sub_failure = true
          current_failure =  Failure.new # reset
          current_failure.message = "#{top_failure}\n\t#{details_match[2]}"
        end

        current_failure.details = details_match[2]
      elsif expected_match
        current_failure.expected = expected_match[1]
      elsif got_match
        current_failure.got = got_match[1]
      elsif spec_match && ! current_failure.spec_file
        current_failure.spec_file = spec_match[2]
        current_failure.spec_file_full_path = spec_match[1]
        current_failure.spec_file_line_number = spec_match[3].nil? ? nil : spec_match[3].to_i
        top_failure = ""
        in_failure = false
        in_sub_failure = false
        in_diff = false
      elsif trace_match and (current_failure.file || current_failure.spec_file)
        in_diff = false
        current_failure.file = trace_match[2]
        current_failure.file_full_path = trace_match[1]
        current_failure.line_number = trace_match[3].nil? ? nil : trace_match[3].to_i
        unless current_failure.spec_file.nil?
          in_failure = false
          in_sub_failure = false
          top_failure = ""
        end
      elsif trace_match
        current_failure.file = trace_match[2]
        current_failure.file_full_path = trace_match[1]
        current_failure.line_number = trace_match[3].nil? ? nil : trace_match[3].to_i
      elsif diff_match && ! in_diff
        in_diff = true
        current_failure.diff = []
          # ends when we get to the trace_match
          # don't want the first line since it's just "Diff:"
      elsif in_diff
        current_failure.diff << line.lstrip
      elsif current_failure.details
        #we're somewhere between the Failure/Error line
        #and the stack trace
        if ! is_ignorable_detail(line)
          current_failure.details += "\n#{line}"
        end
      elsif in_sub_failure && ! something_match.nil?
        if ! is_ignorable_detail(line)
          if current_failure.details
            current_failure.details += "\n#{line}"
          else
            current_failure.details = "\n#{line}"
          end
        end
      end

    end
  end
  unless current_failure.empty?
    new_run_data.failures << current_failure
    # display_failure(current_failure, new_run_data.failures.length - 1)
  end
  new_run_data
end


def interactive_run_handler(run_line, output_buffer)
  PTY.spawn(run_line) do |reader, writer, pid|
    if process_running?(pid)
      while process_running?(pid)
        wait_response = wait_for_read(reader, pid, buffer_last_line(output_buffer))
        if wait_response != :running # ready or debugger
          read_into_buffer(reader, output_buffer)
          # break unless process_running?(pid)
          if ! process_running?(pid)
            break
          end
          if wait_response == :debugger || reader.expect(/^\(byebug\) /, 0.2) #wait 0.2 sec for a match
            puts "\n" + output_buffer.string.split("\n").reverse[0..10].reverse.join("\n")
            user_input = STDIN.gets.chomp
            writer.puts user_input
            sleep 0.2 # give it a moment to exit if it wants to
          else
          #   # did not see ">" within 2 seconds
          #   puts "foo.fail"
          end
          # break unless process_running?(pid)
        end

         read_into_buffer(reader, output_buffer)
      end
    else
      read_into_buffer(reader, output_buffer)
    end
  end
  output_buffer
end

# returns a RunLog
def rerun_failure(failure)
  #TODO warn if not rerunable
  run_this(failure.as_rspec_arg, false)
end

# returns a RunLog
def run_this(spec, update_file, retries = 0)
  # in a successful run there's nothing in STDERR (2)
  # it's all STDOUT (1)
  verbosable = VERBOSE || AUTO_VERBOSE > 0

  run_line ="bundle exec rspec #{verbosable ? '--format=documentation' : ''} #{spec} 2>&1"
  # STDERR.puts("XXX running: #{run_line}")
  # Redirecting STDERR to STDOUT because rspec is...
  # They've made "interesting" choices about what goes where
  output_buffer = interactive_run_handler(run_line, StringIO.new(""))

  # Getting the exit code from PTY.spawn requires calling
  # Process.wait(pid)
  # but that just waits until it exits which will block,
  # so... just gonna have to do without that unless
  # you, my brilliant reader, know a workaround.

  output = unescape(output_buffer.string)
  # STDERR.puts("XXX escaped output: \n#{output}")

  if output.match(/^[A-Z]+[a-z]+\w+Error:/)
    puts "\n⚠️ Problems encountered: \n\t#{output.split("\n").first(10).join("\n\t")}\n..."
    # for whatever reason rspec sends SOME errors to standard out
    # not standard error
    exit 1
  elsif output.match(/(Run `bundle install`|Bundler::GemNotFound|Bundler could not find compatible versions|bundler: command not found: rspec)/m)
    if output.match(/could not find compatible versions/m)
      puts "\nBundler issue you'll have to address..."
      puts output.split("\n")[0..20].join("\n")+"\n..."
      exit 1
    end
    puts "\nYou need to bundle"
    puts "I'll do that for you. Gimme a minute..."
    if retries == 0
      bundle_output, bundle_standard_error, bundle_status = Open3.capture3( "bundle install")
      if bundle_status.exitstatus == 0
        run_this(spec, update_file, 1)
      else
        puts bundle_standard_error
        puts bundle_output
        puts "\n\n\n"
        puts "Nope. I failed to bundle for you. Please reference any errors listed above"
        exit bundle_status.exitstatus
      end
    else
      exit 2
    end
  elsif output.match(/Could not locate Gemfile or \.bundle\/ directory/m)
    puts "\n⚠️ Could not locate Gemfile or .bundle/ directory"
    exit 3
  end

  new_run_data = process_rspec_output(output)
  update_record(new_run_data) if update_file
  new_run_data
end

def update_record_and_display(new_run_data)
  persistable_data = update_record(new_run_data)
  display_failures(persistable_data.failures)
  persistable_data
end
def update_record_and_display_new(new_run_data)
  persistable_data = update_record(new_run_data)
  display_failures(persistable_data.new_failures)
  persistable_data
end

def update_record(new_run_data)
  persistable_data = Killer.clean_run_data(new_run_data)
  if persistable_data.has_failures?
    File.write(PAST_RUN_FILENAME, new_run_data.to_json())
  else
    #NOTE: currently we're storing no metadata about
    # the run so "failures" are the only thing we're
    # persisting. If there are no failures let's not
    # waste time reloading this on the next run.
    File.unlink(PAST_RUN_FILENAME) if File.exist? PAST_RUN_FILENAME
  end
  persistable_data
end

def output_run_results(run_data)
  if run_data.failures.size > 0
    display_failures(run_data.failures)
  else
    puts NO_FAILURES_TEXT
  end
end

def display_run_log(run_log)
  if run_log.has_failures?
    display_failures(run_log.failures)
  else
    puts "No past failure data. Please run a spec through me."
  end
end

def display_files(past_run_data)
  last_output = nil
  past_run_data.failures.each do | failure |
    puts "#{failure.spec_file_full_path}:#{failure.spec_file_line_number}"
  end
end

def is_ignorable_detail(line)
  !! /^\s+#\s+/.match(line)
end

def with_captured_stdout
  original_stdout = $stdout  # capture previous value of $stdout
  $stdout = StringIO.new     # assign a string buffer to $stdout
  yield                      # perform the body of the user code
  $stdout.string             # return the contents of the string buffer
ensure
  $stdout = original_stdout  # restore $stdout to its previous value
end

def confirm_test_files_or_die(options)
  if ! File.exist? options[:test_file]
    STDERR.puts "Unable to find test file: #{options[:test_file]}"
    exit 1
  end
  if ! File.exist? options[:expected_output_file]
    STDERR.puts "Unable to find expected test output file: #{options[:expected_output_file]}"
    exit 1
  end
end


# -------------------------

past_run_data = RunLog.new()

if File.exist?(PAST_RUN_FILENAME) && ! TEST_MODE
  past_run_data = RunLog.from_file(PAST_RUN_FILENAME)
end

if TEST_MODE
  confirm_test_files_or_die(OPTIONS)

  generated_run_log = process_rspec_output(unescape(File.read(OPTIONS[:test_file])))
  generated_output = unescape(
    with_captured_stdout {
      display_run_log(generated_run_log)
    }
  )

  success_message = "✅ looks good. "
  if generated_output != File.read(OPTIONS[:expected_output_file])
    tempfile = Tempfile.new('foo')
    tempfile.write(generated_output)
    tempfile.close
    # diff it, but tell diff to ignore whitespace changes
    # see note below about \r
    diff_output = `diff -b #{OPTIONS[:expected_output_file]} #{tempfile.path}`.chomp
    if diff_output != ''
      STDERR.puts "Output didn't match expectations. Diff below"
      STDERR.puts "< == expected output"
      STDERR.puts "> == actual output"
      STDERR.puts "--------------------------------------------------------"
      STDERR.puts diff_output
      STDERR.puts "--------------------------------------------------------"

      temp_copy = "#{OPTIONS[:test_file].sub(".txt", "")}_actual_test_output.txt"
      `cp #{tempfile.path} #{temp_copy}`
      STDERR.puts "generated output saved to: #{temp_copy}"
      tempfile.unlink
      exit 1
    else
      puts "#{success_message}"
      puts 'Note: There were whitespace differences.'
      puts '      This is most likely a result of \r characters not being stripped'
      puts '      from the original rspec output: '
      puts "        #{OPTIONS[:test_file]}"
      exit 0
    end
  else
    puts success_message
    exit 0
  end


elsif INPUT.nil? && ! OPTIONS[:rspec]
  display_run_log(past_run_data)
  puts NO_TESTS_RUN_TEXT
elsif /.*_spec.rb(:\d+)?$/.match(INPUT) \
  || INPUT=="all" \
  || INPUT=="last_file" \
  || /\S+\/$/.match(INPUT) # ends with a slash, prolly a directory
  if INPUT != "all" && INPUT != "last_file"
    puts "Running specs in #{INPUT}\n"
    # must be a spec file
    updated_run_data = run_this(INPUT, true)
    updated_run_data = update_record_and_display(updated_run_data)
  elsif INPUT == "last_file"
    if ! past_run_data.has_failures?
      puts "No file data from last run"
      exit 64 # EX_USAGE
    end
    last_file = past_run_data.last_file
    if last_file.nil?
      STDERR.puts("🤨 Unable to find spec file amongst past failures. ")
      exit 1
    end
    puts "Running #{last_file}...\n"
    # NOTE: display happens during rerun
    updated_run_data = Rerunner.new(past_run_data).rerun_last_file
    update_record(updated_run_data)
    # rerunner will take care of mentioning fixed tests
  elsif INPUT == "all"
    puts "Running ALL specs...\n"
    updated_run_data = run_this('', true)
    updated_run_data = update_record_and_display(updated_run_data)
  end
  # output_run_results(updated_run_data)
  puts NO_FAILURES_TEXT unless updated_run_data.has_failures?
elsif /^\d+$/.match(INPUT) || OPTIONS[:rspec]
  failure_number = OPTIONS[:rspec] ? OPTIONS[:rspec] : INPUT.to_i
  offset = REMAINING_ARGS.size > 0 ? REMAINING_ARGS[0].to_i : 0
  # NOTE: display happens during rerun
  failure= past_run_data.get_failure_by_number(failure_number)
  failure.offset = offset
  if !OPTIONS[:rspec]
    updated_run_data = Rerunner.new(past_run_data).rerun(failure_number)
  else
    # we can't run it ourselves or we'll hang on byebug or
    # binding.pry lines
    #
    # we _could_ do it the way we do the other interactive stuff
    # but the idea here was to make it trivial to rerun something in
    # rspec directly
    puts "bundle exec rspec #{failure.as_rspec_arg}"
    exit 0
  end
  update_record(updated_run_data)
  # rerunner will take care of mentioning fixed tests
elsif INPUT == "rerun"
 if ! past_run_data.has_failures?
   puts "No past failures found to rerun."
   exit 0
 end
 Rerunner.new(past_run_data).rerun_all
elsif INPUT == "kill" &&  /^\d+(-\d+)?$/.match(REMAINING_ARGS[0].to_s)
  if ! /^\d+-\d+?$/.match(REMAINING_ARGS[0])
    indexes = Array(REMAINING_ARGS[0].to_i)
  else
    x, y = REMAINING_ARGS[0].split('-').map(&:to_i)
    # If we work from highest to lowest we can
    # avoid complications resulting
    # from shortening an array while iterating over it

    if x < y
      indexes = (x..y).to_a.reverse
    elsif x == y
      indexes = [x]
    else
      indexes = (x..y).to_a
    end
  end

  Killer.mark_for_death(past_run_data, indexes)
  puts "-------------------------------------------------\n"
  puts "-------------------------------------------------\n"
  updated_run_data = update_record(past_run_data)
  display_failures(updated_run_data.failures)
  puts NO_FAILURES_TEXT unless updated_run_data.has_failures?
elsif INPUT == "file" &&  /^\d+$/.match(REMAINING_ARGS[0].to_s)
  number = REMAINING_ARGS[1].to_i
  failure = past_run_data.get_failure_by_number(number)
  if failure
    puts failure.spec_file_full_path
  else
    puts "Couldn't find failure numbered: #{number}"
    exit 75 # EX_TEMPFAIL (user input)
  end
elsif INPUT == "files"
  display_files(past_run_data)
elsif /\.rb$/.match(INPUT)
  STDERR.puts "🛑 That's a ruby file, but not an rspec (*_spec.rb) file."
  matches = `find . -name $(basename #{INPUT.gsub(/\.rb$/, "_spec.rb")})`.strip
  if matches != ""
    STDERR.puts("Did you mean:")
    matches.split("\n").each do |match|
      STDERR.puts"\t#{match}"
    end
  end
end
